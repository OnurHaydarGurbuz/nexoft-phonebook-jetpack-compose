package com.example.nexoft.feature.contacts

import android.content.ContentProviderOperation
import android.content.Context
import android.net.Uri
import android.provider.ContactsContract
import java.io.InputStream

fun isInDeviceContacts(context: Context, phone: String): Boolean {
    // En sağlam kısa yol: PhoneLookup CONTENT_FILTER_URI
    val uri = ContactsContract.PhoneLookup.CONTENT_FILTER_URI.buildUpon()
        .appendPath(phone).build()
    context.contentResolver.query(uri, arrayOf(ContactsContract.PhoneLookup._ID), null, null, null)
        ?.use { c -> return c.moveToFirst() }
    return false
}

fun saveToDeviceContacts(
    context: Context,
    first: String,
    last: String,
    phone: String,
    photo: Uri?
): Boolean {
    val ops = ArrayList<ContentProviderOperation>()
    val rawContactInsertIndex = ops.size
    ops.add(ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)
        .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null)
        .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)
        .build())

    // İsim
    ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
        .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, rawContactInsertIndex)
        .withValue(ContactsContract.Data.MIMETYPE,
            ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
        .withValue(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, first)
        .withValue(ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, last)
        .build())

    // Telefon
    ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
        .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, rawContactInsertIndex)
        .withValue(ContactsContract.Data.MIMETYPE,
            ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
        .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, phone)
        .withValue(ContactsContract.CommonDataKinds.Phone.TYPE,
            ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE)
        .build())

    // Foto (varsa)
    photo?.let { uri ->
        val bytes = context.contentResolver.openInputStream(uri)?.use(InputStream::readBytes)
        if (bytes != null) {
            ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, rawContactInsertIndex)
                .withValue(ContactsContract.Data.MIMETYPE,
                    ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.Photo.PHOTO, bytes)
                .build())
        }
    }

    return try {
        context.contentResolver.applyBatch(ContactsContract.AUTHORITY, ops)
        true
    } catch (t: Throwable) {
        false
    }
}
